name: Subdomain2 & Vulnerability Scanner (Telegram)

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to scan'
        required: true
        default: 'example.com'
  schedule:
    - cron: '0 6 * * 1'

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install System Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y jq python3-pip curl

      - name: Install Tools (subfinder, nuclei, assetfinder, amass, httpx, sublist3r)
        run: |
          # set explicit GOPATH so go install binary ends up predictable
          export GOPATH="$HOME/go"
          mkdir -p "$GOPATH/bin"
          echo "GOPATH=${GOPATH}" >> $GITHUB_ENV

          # ensure pip user installs path exists
          mkdir -p $HOME/.local/bin

          # install go tools (pin versions in production if desired)
          export PATH="$GOPATH/bin:$HOME/.local/bin:$PATH"
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest || true
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest || true
          go install -v github.com/tomnomnom/assetfinder@latest || true
          go install -v github.com/OWASP/Amass/v3/...@latest || true
          # Ensure httpx is installed via go (this is the correct module path)
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest || true

          # python tool
          pip3 install --user sublist3r || true

          # export PATH for later steps
          echo "PATH=$GOPATH/bin:$HOME/.local/bin:\$PATH" >> $GITHUB_ENV

          # quick verification (prints versions, not required but helpful)
          echo "---- Installed tool versions ----"
          if command -v httpx >/dev/null 2>&1; then httpx -version || true; else echo "httpx: NOT FOUND in PATH"; fi
          if command -v nuclei >/dev/null 2>&1; then nuclei -version || true; else echo "nuclei: NOT FOUND in PATH"; fi
          if command -v subfinder >/dev/null 2>&1; then subfinder -version || true; else echo "subfinder: NOT FOUND in PATH"; fi
          echo "---------------------------------"

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] || [ -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            echo "::error::Telegram secrets TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID are missing"
            exit 1
          fi
          echo "BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> $GITHUB_ENV

      - name: Set Domain
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=example.com" >> $GITHUB_ENV
          fi

      - name: Notify Start (Telegram)
        env:
          BOT_TOKEN: ${{ env.BOT_TOKEN }}
          CHAT_ID: ${{ env.CHAT_ID }}
          DOMAIN: ${{ env.DOMAIN }}
        run: |
          BOT_TOKEN="${BOT_TOKEN}"
          CHAT_ID="${CHAT_ID}"
          MSG="üîç *Scan Started*\n*Domain:* ${DOMAIN}\n*Trigger:* ${{ github.event_name }}\n*Tools:* Subfinder + Assetfinder + Sublist3r + Amass + Nuclei + httpx"
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${CHAT_ID}" \
            --data-urlencode "text=${MSG}" \
            -d "parse_mode=Markdown"

      - name: Run Enumeration (multi-tool)
        run: |
          set -u
          DOMAIN="${DOMAIN}"
          OUT_DIR=./scan_output
          mkdir -p "$OUT_DIR"

          echo "[*] Running subfinder..."
          subfinder -d "$DOMAIN" -silent -o "$OUT_DIR/subfinder.txt" || true

          echo "[*] Running assetfinder..."
          assetfinder --subs-only "$DOMAIN" > "$OUT_DIR/assetfinder.txt" 2>/dev/null || true

          echo "[*] Running sublist3r..."
          sublist3r -d "$DOMAIN" -o "$OUT_DIR/sublist3r.txt" || true

          echo "[*] Running amass (passive)..."
          amass enum -passive -d "$DOMAIN" -o "$OUT_DIR/amass.txt" || true

          echo "[*] Merging results..."
          # normalize, remove empty, dedupe
          cat "$OUT_DIR"/*.txt 2>/dev/null | sed 's/\r$//' | sed '/^\s*$/d' | sort -u > subdomains.txt || true
          echo "SUBDOMAINS_FOUND=$(wc -l < subdomains.txt || echo 0)" >> $GITHUB_ENV
          echo "[*] Found $(wc -l < subdomains.txt || echo 0) unique subdomains."

      - name: Send subdomains.txt via Telegram
        env:
          BOT_TOKEN: ${{ env.BOT_TOKEN }}
          CHAT_ID: ${{ env.CHAT_ID }}
          DOMAIN: ${{ env.DOMAIN }}
        run: |
          BOT_TOKEN="${BOT_TOKEN}"
          CHAT_ID="${CHAT_ID}"
          if [ -f subdomains.txt ] && [ -s subdomains.txt ]; then
            COUNT=$(wc -l < subdomains.txt)
            MSG="üìÑ *Subdomains List*\n*Domain:* ${DOMAIN}\n*Count:* ${COUNT}"
            MAX_BYTES=$((49 * 1024 * 1024))
            FILE_SIZE=$(stat -c%s subdomains.txt || echo 0)
            if [ "$FILE_SIZE" -le "$MAX_BYTES" ]; then
              curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument" \
                -F "chat_id=${CHAT_ID}" \
                -F "document=@subdomains.txt" \
                -F "caption=${MSG}" \
                -F "parse_mode=Markdown"
            else
              curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                --data-urlencode "chat_id=${CHAT_ID}" \
                --data-urlencode "text=${MSG} ‚Äî file too large to send; uploaded as artifact." \
                -d "parse_mode=Markdown"
            fi
          else
            curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
              --data-urlencode "chat_id=${CHAT_ID}" \
              --data-urlencode "text=‚ö†Ô∏è No subdomains found for ${DOMAIN}" \
              -d "parse_mode=Markdown"
          fi

      - name: Run Nuclei (scan and send results)
        env:
          BOT_TOKEN: ${{ env.BOT_TOKEN }}
          CHAT_ID: ${{ env.CHAT_ID }}
          DOMAIN: ${{ env.DOMAIN }}
        run: |
          BOT_TOKEN="${BOT_TOKEN}"
          CHAT_ID="${CHAT_ID}"
          if [ -f subdomains.txt ] && [ -s subdomains.txt ]; then
            echo "[*] Running nuclei on subdomains..."
            nuclei -l subdomains.txt -severity critical,high,medium -silent -o nuclei-results.txt || true
            N_COUNT=$(wc -l < nuclei-results.txt 2>/dev/null || echo 0)
            SUMMARY="üõ°Ô∏è *Nuclei Scan Complete*\n*Domain:* ${DOMAIN}\n*Findings:* ${N_COUNT}"
            MAX_BYTES=$((49 * 1024 * 1024))
            FILE_SIZE=$(stat -c%s nuclei-results.txt || echo 0)
            if [ "$FILE_SIZE" -le "$MAX_BYTES" ] && [ "$FILE_SIZE" -gt 0 ]; then
              curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument" \
                -F "chat_id=${CHAT_ID}" \
                -F "document=@nuclei-results.txt" \
                -F "caption=${SUMMARY}" \
                -F "parse_mode=Markdown"
            else
              if [ "$N_COUNT" -gt 0 ]; then
                curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                  --data-urlencode "chat_id=${CHAT_ID}" \
                  --data-urlencode "text=${SUMMARY} ‚Äî results too large (or empty). Uploaded as artifact." \
                  -d "parse_mode=Markdown"
              else
                curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                  --data-urlencode "chat_id=${CHAT_ID}" \
                  --data-urlencode "text=‚úÖ *Nuclei Scan Complete* ‚Äî no findings for ${DOMAIN}" \
                  -d "parse_mode=Markdown"
              fi
            fi
          else
            echo "[!] No subdomains for nuclei."
            curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
              --data-urlencode "chat_id=${CHAT_ID}" \
              --data-urlencode "text=‚ö†Ô∏è Nuclei: no subdomains to scan for ${DOMAIN}" \
              -d "parse_mode=Markdown"
          fi

      - name: Run HTTP Probing (httpx) and produce httpx.txt (then send)
        env:
          BOT_TOKEN: ${{ env.BOT_TOKEN }}
          CHAT_ID: ${{ env.CHAT_ID }}
          DOMAIN: ${{ env.DOMAIN }}
        run: |
          BOT_TOKEN="${BOT_TOKEN}"
          CHAT_ID="${CHAT_ID}"
          OUT_DIR=./scan_output
          mkdir -p "$OUT_DIR"
          rm -f httpx.json httpx.txt

          if [ -f subdomains.txt ] && [ -s subdomains.txt ]; then
            echo "[*] Running httpx to probe hosts (status, response time, title)..."
            # produce JSONL
            httpx -l subdomains.txt -silent -threads 100 -timeout 10 -rt -sc -title -json -o httpx.json || true

            if [ -f httpx.json ]; then
              jq -r '(
                (.url // .host // "") as $u |
                (.status_code // 0) as $sc |
                ((.response_time // 0) * 1000 | floor) as $rt |
                (.title // "") as $t |
                ($u + " | " + ($sc|tostring) + " | " + ($rt|tostring) + "ms | " + $t)
              )' httpx.json > httpx.txt || true

              HTTPX_COUNT=$(wc -l < httpx.txt 2>/dev/null || echo 0)
              echo "HTTPX_PROBED=${HTTPX_COUNT}" >> $GITHUB_ENV
              echo "[*] httpx produced httpx.txt with ${HTTPX_COUNT} lines."

              SUMMARY="üåê *HTTP Probe Complete*\n*Domain:* ${DOMAIN}\n*Probed:* ${HTTPX_COUNT}"
              MAX_BYTES=$((49 * 1024 * 1024))
              FILE_SIZE=$(stat -c%s httpx.txt || echo 0)
              if [ "$FILE_SIZE" -le "$MAX_BYTES" ] && [ "$FILE_SIZE" -gt 0 ]; then
                curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument" \
                  -F "chat_id=${CHAT_ID}" \
                  -F "document=@httpx.txt" \
                  -F "caption=${SUMMARY}" \
                  -F "parse_mode=Markdown"
              else
                curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                  --data-urlencode "chat_id=${CHAT_ID}" \
                  --data-urlencode "text=${SUMMARY} ‚Äî httpx results too large to send; uploaded as artifact." \
                  -d "parse_mode=Markdown"
              fi
            else
              echo "[!] httpx produced no output."
              curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                --data-urlencode "chat_id=${CHAT_ID}" \
                --data-urlencode "text=‚ÑπÔ∏è HTTP Probe: no results for ${DOMAIN}" \
                -d "parse_mode=Markdown"
            fi
          else
            echo "[!] No subdomains to probe with httpx."
            curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
              --data-urlencode "chat_id=${CHAT_ID}" \
              --data-urlencode "text=‚ö†Ô∏è HTTP Probe: no subdomains to probe for ${DOMAIN}" \
              -d "parse_mode=Markdown"
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            subdomains.txt
            nuclei-results.txt
            httpx.json
            httpx.txt
            scan_output/*.txt
